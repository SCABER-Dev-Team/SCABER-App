<div class="pass-pages pass-riding" id="pass-riding">
    <div class="pass-map" id="pass-map"></div>
    <div class="toolbar pass-toolbar" id="pass-toolbar">
        <div class="row">
            <div class="col s6 m6 l6">
                <button class="waves-effect waves-light btn btn-large" onclick="triggerPassengerOrderModal('order');">預約乘車
                    <i class="material-icons right">event</i>
                </button>
            </div>
            <div class="col s6 m6 l6">
                <button class="waves-effect waves-light btn btn-large" onclick="triggerPassengerBookModal('book');">立即乘車
                    <i class="material-icons right">local_taxi</i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal ordering -->
<div class="modal modal-order" id="modal-order">
    <div class="modal-content">
        <h4>預約 SCABER！</h4>
        <p>按下「預約乘車」我們將儘速爲您派車。</p>
    </div>
    <div class="modal-footer">
        <button class="modal-action waves-effect waves-green btn-flat" onclick="triggerPassengerOrderModal('form');">預約乘車</button>
    </div>
</div>

<!-- Modal ordering form -->
<div class="modal modal-form" id="modal-form">
    <div class="modal-content">
        <h4>開始預約！</h4>
        <form class="cpl s12">
            <div class="row modal-input">
                <div class="input-field col s12">
                    <i class="material-icons prefix">account_circle</i>
                    <input id="username" type="text">
                    <label class="center-align" for="username" data-error="wrong" data-success="right">乘車地</label>
                </div>
            </div>
            <div class="row modal-input">
                <div class="input-field col s12">
                    <i class="material-icons prefix">mail</i>
                    <input id="email" type="email">
                    <label class="center-align" for="email" data-error="wrong" data-success="right">目的地</label>
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <button class="modal-action waves-effect waves-green btn-flat">預約乘車</button>
    </div>
</div>

<!-- Modal booking -->
<div class="modal modal-book" id="modal-book">
    <div class="modal-content">
        <h4>立即 SCABER！</h4>
        <p>按下「立即乘車」我們將儘速爲您派車。</p>
    </div>
    <div class="modal-footer">
        <button class="modal-action waves-effect waves-green btn-flat" onclick="goRiding()">立即乘車</button>
    </div>
</div>

<!-- Modal waiting for match -->
<div class="modal modal-wait" id="modal-wait">
    <div class="modal-content">
        <h4>正在派車中！</h4>
        <p>請您耐心等待，我們正在爲您派車。</p>
    </div>
    <div class="modal-footer valign-wrapper">
        <div class="preloader-wrapper right-align small active">
            <div class="spinner-layer">
                <div class="circle-clipper left">
                    <div class="circle"></div>
                </div><div class="gap-patch">
                    <div class="circle"></div>
                </div><div class="circle-clipper right">
                    <div class="circle"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal success -->
<div class="modal modal-succ" id="modal-succ">
    <div class="modal-content">
        <h5>SCABER 正在路上！</h5>
        <ul class="collection collection-avatar">
            <li class="collection-item avatar">
                <i class="material-icons circle">perm_identity</i> 
                <p class="title">司機姓名</p>
                <p class="content-p" id="driver-name">[name]</p>
            </li>
            <li class="collection-item avatar">
                <i class="material-icons circle">local_activity</i> 
                <p class="title">車牌號碼</p>
                <p class="content-p" id="driver-license">[license]</p>

            </li>
            <li class="collection-item avatar">
                <i class="material-icons circle">call</i>
                <p class="title">手機號碼</p>
                <p class="content-p" id="driver-phone">[phone]</p>
            </li>
            <li class="collection-item avatar">
                <i class="material-icons circle">local_taxi</i>
                <p class="title">車輛型號</p>
                <p class="content-p" id="driver-model">[model]</p>
            </li>
            <li class="collection-item avatar">
                <i class="material-icons circle">access_alarm</i>
                <p class="title">抵達時間</p>
                <p class="content-p" id="driver-arrival">約 [arrival time] 分鐘</p>
            </li>
        </ul>
    </div>
    <div class="modal-footer">
        <button class="modal-action modal-close waves-effect waves-green btn-flat" id="startBtn">選擇目的地</button>
        <button class="modal-action modal-close waves-effect waves-green btn-flat">關閉視窗</button>
    </div>
</div>

<!-- Modal choosing location -->
<div class="modal modal-location" id="modal-location">
    <div class="modal-content">
        <h4>前往目的地？</h4>
        <form class="cpl s12">
            <div class="row modal-input">
                <div class="input-field col s12">
                    <i class="material-icons prefix">place</i>
                    <input id="book-dest" type="text">
                    <label class="center-align" for="email" data-error="wrong" data-success="right">目的地</label>
                </div>
            </div>
        </form>
    </div>
    <div class="modal-footer">
        <button class="modal-action modal-close waves-effect waves-green btn-flat" id="tripBtn">發車</button>
    </div>
</div>

<!-- Google Map -->
<script>
var map;
var marker;
var infoWindow;
function initMap() {
    map = new google.maps.Map(document.getElementById('pass-map'), {
        zoom: 14,
        center: { 
            lat: 25.040606, 
            lng: 121.536547 
        }
    });
    // infowindow
    infoWindow = new google.maps.InfoWindow({content: "SCABER"});
    // Custom marker
    var scaber_flag = {
        url: 'scaber_flag.png',
        size: new google.maps.Size(20, 32),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(0, 32)
    };
    // shape of click 
    var scaber_flag_shape = {
        coords: [1, 1, 1, 20, 18, 20, 18, 1],
        type: 'poly'
    };
    // marker init 
    marker = new google.maps.Marker({
        position: {
            lat: 25.040606,
            lng: 121.536547 
        },
        map: map,
        icon: scaber_flag,
        shape:scaber_flag_shape,
        title: "Your Position",
        zIndex: 1
    });
    // Add Marker Listen
    marker.addListener('click', function() {
        infoWindow.open(map, marker);
    });
}

// Notify server to find a driver
function goRiding() {
    if (!passenger_page_status) {
        // get current location
        getCurrentLocation(function(err, data) {
            if (err) {
                console.log(data);
            }
            else {
                // set center 
                map.setZoom(14);
                map.setCenter(data);
                marker.setPosition(data);
                // Call waiting
                $('.modal-book').modal('close');
                triggerPassengerBookModal('waiting');
                // emit signal 
                socket.emit('find_driver', {
                    id: <%- JSON.stringify(scaber_account) %>,
                    phone: <%- JSON.stringify(user_phone) %>,
                    unique: <%- JSON.stringify(passenger_profile.trueID) %>,
                    pos: data
                });
                // Clear GAs
                clearMonitorPassengerRiding();
                // Debug: pos2address
                /*pos2address(data,function(err,msg_data){
                    if(err)
                        console.error(msg_data);
                    else{
                        console.log(msg_data); // FIXME
                        address2pos(msg_data,function(perr,pos_data){
                            if(perr)
                                console.error(pos_data);
                            else{
                                console.log(JSON.stringify(pos_data));
                            }
                        });
                    }
                });*/
            }
        });
    }
    else {
        $('.modal-book').modal('close');
        $('.modal-succ').modal('open');
    }
}

// driver arrived
function driver_arrived() {
    // Open succ modal
    $('#modal-succ').modal('open');
    // Display start btn 
    $('#startBtn').show();
    // FIXME: notify server to add those GAs into channel
}

// BTN signal here 
$('#startBtn').click(function() {
    // display "location" modal
    $('#modal-location').modal('open');
});

$('#tripBtn').click(function() {
    // FIXME: 判斷使用者是否輸入正確的地標，再做 emit
    console.log("Trip start!");
    var destination = $('#book-dest').val();
    address2pos(destination,function(err,pos){
        if(err){
            alert(pos);
        }
        else{
            // get Position information of destination
            console.log(JSON.stringify(pos));
            // fetch current location
            getCurrentLocation(function(c_err,c_pos){
                if(c_err){
                    alert(c_pos);
                }
                else{
                    // Get current position
                    console.log(JSON.stringify(c_pos));
                    // Using google api - DistanceMatrixService to get distance and time 
                    getDistTime(c_pos,pos,function(dterr,result){
                        // Get distance and duration
                        console.log(JSON.stringify(result));
                        // Emit signal to server , broadcast information to each GAs => time to go 
                        socket.emit('trip_start', {
                            id: <%- JSON.stringify(scaber_account) %>,
                            phone: <%- JSON.stringify(user_phone) %>,
                            unique: <%- JSON.stringify(passenger_profile.trueID) %>,
                            distance: result.distance,
                            duration: result.duration,
                            startPos: c_pos,
                            endPos: pos
                        });
                    });
                }
            });
        }
    });
});

// Socket IO section 

// Find driver ! (Waiting modal -> hide , pass-riding -> hide , pass-riding-waiting -> show)
socket.on('find_driver_listen',function(rawdata){
    if (rawdata.header == 'error') {
        triggerPassengerBookModal('waiting');
    }
    else {
        triggerPassengerBookModal('match');
        // set driver info 
        $('#driver-name').html(rawdata.msg.driverName);
        $('#driver-phone').html(rawdata.msg.driverPhone);
        $('#driver-license').html(rawdata.msg.license);
        $('#driver-model').html(rawdata.msg.car_model);
        // Start timer
        arrivalTimer("0:15");
        // Switch page 
        $('#pass-riding').hide();
        $('#pass-riding-wait').show();
        // Set information in Monitor (Waiting) Panel
        $('#driver-name-waiting').html(rawdata.msg.driverName);
        $('#driver-phone-waiting').html(rawdata.msg.driverPhone);
        $('#driver-license-waiting').html(rawdata.msg.license);
        $('#driver-model-waiting').html(rawdata.msg.car_model);
    }
});
// Get Waiting channel 
socket.on('get_waiting_channel',function(rawdata){
    // latest updated time
    console.log("Latest updated time: " + rawdata.date);
    // FIXME: update the monitor broad => drop all element and then 
    console.log(JSON.stringify(rawdata.channel));
    // Add available entry => clear first 
    clearAvailableEntry();
    // Add all 
    for(var index in rawdata.channel){
        addAvailableEntry(<%- JSON.stringify(scaber_account) %>,<%- JSON.stringify(user_phone) %>,rawdata.channel[index].passenger_name,rawdata.channel[index].passenger_phone,rawdata.channel[index].channel_name);
    }
});

// If using channel owner
socket.on('add_ga',function(rawdata){
    // Compare different
    console.log("Compare => Target : " + rawdata.target_name + "; Current : " + <%- JSON.stringify(scaber_account) %>);
    if(rawdata.target_name == <%- JSON.stringify(scaber_account) %>){
        // This is channel owner => so add ga into list
        console.log("Match! " + rawdata.target_name);
        addMonitorPassengerRiding(rawdata.ga_name,rawdata.ga_phone,rawdata.target_channel);
    }
    else{
        // Ignore this message , just print for debug 
        console.log("Get ga debug message: " + rawdata.ga_name);
    }
});

// Cancel from server 
socket.on('cancel_who',function(rawdata){
    if(rawdata.cancel_target == <%- JSON.stringify(scaber_account) %>){
        alert("該名使用者拒絕了您的好意");
        // FIXME => disable the waiting modal!

        socket.emit('leaving',{
            room_name: rawdata.cancel_from
        });
    }
    else{
        // Ignore 
        console.log("Not me~^^");
    }
});

// Safty channel build
socket.on('safty_channel_build',function(rawdata){
    // debug
    console.log(JSON.stringify(rawdata));
    // Set up new timer to count down => check out safty
    tripTimer(rawdata.duration);
    // Calculate the fee 
    tripFee(rawdata.duration);
    // And then open Google map and draw two point on it
    triggerPassengerTrip();
});

// Chat room 
socket.on('chat_info_get',function(rawdata){

});
</script>

<!-- Google Map API -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDNT8S6xvvrKY1Ef8AXtcROOKDYBsVt-p4&callback=initMap"></script>

<!-- Passenger routing -->
<script>
/*var destination;
var directionsDisplay;
var directionsService = new google.maps.DirectionsService();

google.maps.event.addDomListener(window, 'load', function() {
    new google.maps.places.SearchBox(document.getElementById('txtDestination'));
    directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
});

/*
function getRoute() {
    directionsDisplay.setMap(map);
    directionsDisplay.setPanel(document.getElementById('passenger-direction'));

    // Direction and route
    destination = document.getElementById('txtDestination').value;

    var req = {
        origin: src, // get booking src
        destination: destination,
        travelMode: google.maps.TravelMode.DRIVING
    };
    directionsService.route(req, function(res, status) {
        if (status == google.maps.DirectionsStatus.OK) {
            directionsDisplay.setDirections(res);
        }
    });

    // Distance and duration
    var service = new google.maps.DistanceMatrixService();

    service.getDistanceMatrix({
        origins: [src], // get booking src
        destinations: [destination],
        travelMode: google.maps.TravelMode.DRIVING,
        unitSystem: google.maps.UnitSystem.METRIC,
        avoidHighways: false,
        avoidTolls: false
    }, function(res, status) {
        if (status == google.maps.DistanceMatrixStatus.OK && res.rows[0].elements[0].status != 'ZERO_RESULTS') {
            var distance = res.rows[0].elements[0].distance.text;
            var duration = res.rows[0].elements[0].duration.text;
            var dvDistance = document.getElementById("passenger-distance");

            // return miles and arrival time
            dvDistance.innerHTML = '';
            dvDistance.innerHTML += 'total Distance: ' + distance + "<br />";
            dvDistance.innerHTML += "total Time:" + duration;
        } else {
            alert('Unable to find the distance via road.');
        }
    });
}*/
</script>
